#!/bin/bash

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
VIOLET='\033[0;35m'
NC='\033[0m' # No Color

function show_logo() {
    echo -e " "
    echo -e " "
    echo -e "${NC}$(t "welcome")${NC}"
    curl -s https://raw.githubusercontent.com/pittpv/aztec-monitoring-script/main/other/logo.sh | bash
}

# === Language settings ===
LANG=""
declare -A TRANSLATIONS

# Translation function
t() {
  local key=$1
  echo "${TRANSLATIONS[$LANG,$key]}"
}

# Initialize languages
init_languages() {
  echo -e "\n${BLUE}Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:${NC}"
  echo -e "1. English"
  echo -e "2. –†—É—Å—Å–∫–∏–π"
  read -p "> " lang_choice

  case $lang_choice in
    1) LANG="en" ;;
    2) LANG="ru" ;;
    *) LANG="en" ;;
  esac

  # English translations
  TRANSLATIONS["en,welcome"]="Welcome to the Aztec node monitoring script"
  TRANSLATIONS["en,title"]="========= Main Menu ========="
  TRANSLATIONS["en,option1"]="1. Check container and current block"
  TRANSLATIONS["en,option2"]="2. Install cron monitoring agent"
  TRANSLATIONS["en,option3"]="3. Remove cron agent and files"
  TRANSLATIONS["en,option4"]="4. Find rollupAddress in logs"
  TRANSLATIONS["en,option5"]="5. Find PeerID in logs"
  TRANSLATIONS["en,option6"]="6. Find governanceProposerPayload in logs"
  TRANSLATIONS["en,option7"]="7. Check Proven L2 Block and Sync Proof"
  TRANSLATIONS["en,option8"]="8. Change RPC URL"
  TRANSLATIONS["en,option0"]="0. Exit"
  TRANSLATIONS["en,rpc_change_prompt"]="Enter new RPC URL:"
  TRANSLATIONS["en,rpc_change_success"]="‚úÖ RPC URL successfully updated"
  TRANSLATIONS["en,choose_option"]="Select option:"
  TRANSLATIONS["en,checking_deps"]="üîç Checking required components:"
  TRANSLATIONS["en,missing_tools"]="Required components are missing:"
  TRANSLATIONS["en,install_prompt"]="Do you want to install them now? (Y/n):"
  TRANSLATIONS["en,missing_required"]="‚ö†Ô∏è Script cannot work without required components. Exiting."
  TRANSLATIONS["en,rpc_prompt"]="Enter RPC URL:"
  TRANSLATIONS["en,env_created"]="‚úÖ Created .env file with RPC URL"
  TRANSLATIONS["en,env_exists"]="‚úÖ Using existing .env file with RPC URL:"
  TRANSLATIONS["en,search_container"]="üîç Searching for 'aztec' container..."
  TRANSLATIONS["en,container_not_found"]="‚ùå Container 'aztec' not found."
  TRANSLATIONS["en,container_found"]="‚úÖ Container found:"
  TRANSLATIONS["en,get_block"]="üîó Getting current block from contract..."
  TRANSLATIONS["en,block_error"]="‚ùå Error: Failed to get block number. Check RPC or contract."
  TRANSLATIONS["en,current_block"]="üì¶ Current block number:"
  TRANSLATIONS["en,node_ok"]="‚úÖ Node is working and processing current block"
  TRANSLATIONS["en,node_behind"]="‚ö†Ô∏è Current block not found in logs. Node might be behind."
  TRANSLATIONS["en,search_rollup"]="üîç Searching for rollupAddress in 'aztec' container logs..."
  TRANSLATIONS["en,rollup_found"]="‚úÖ Current rollupAddress:"
  TRANSLATIONS["en,rollup_not_found"]="‚ùå rollupAddress not found in logs."
  TRANSLATIONS["en,search_peer"]="üîç Searching for PeerID in 'aztec' container logs..."
  TRANSLATIONS["en,peers_found"]="Found PeerIDs:"
  TRANSLATIONS["en,peer_not_found"]="‚ùå No PeerID found in logs."
  TRANSLATIONS["en,search_gov"]="üîç Searching for governanceProposerPayload in 'aztec' container logs..."
  TRANSLATIONS["en,gov_found"]="Found governanceProposerPayload values:"
  TRANSLATIONS["en,gov_not_found"]="‚ùå No governanceProposerPayload found."
  TRANSLATIONS["en,gov_changed"]="üõë GovernanceProposerPayload change detected!"
  TRANSLATIONS["en,gov_was"]="‚ö†Ô∏è Was:"
  TRANSLATIONS["en,gov_now"]="Now:"
  TRANSLATIONS["en,gov_no_changes"]="‚úÖ No changes detected."
  TRANSLATIONS["en,token_prompt"]="Enter Telegram Bot Token:"
  TRANSLATIONS["en,chatid_prompt"]="Enter Telegram Chat ID:"
  TRANSLATIONS["en,agent_added"]="‚úÖ Agent added to cron and will run every minute."
  TRANSLATIONS["en,agent_exists"]="‚ÑπÔ∏è Agent already exists in cron."
  TRANSLATIONS["en,removing_agent"]="üóë Removing agent and cron task..."
  TRANSLATIONS["en,agent_removed"]="‚úÖ Agent and cron task removed."
  TRANSLATIONS["en,goodbye"]="üëã Goodbye."
  TRANSLATIONS["en,invalid_choice"]="‚ùå Invalid choice. Try again."
  TRANSLATIONS["en,searching"]="Searching..."
  TRANSLATIONS["en,get_proven_block"]="üîç Getting proven L2 block number..."
  TRANSLATIONS["en,proven_block_found"]="‚úÖ Proven L2 Block Number:"
  TRANSLATIONS["en,proven_block_error"]="‚ùå Failed to retrieve the proven L2 block number."
  TRANSLATIONS["en,get_sync_proof"]="üîç Fetching Sync Proof..."
  TRANSLATIONS["en,sync_proof_found"]="‚úÖ Sync Proof:"
  TRANSLATIONS["en,sync_proof_error"]="‚ùå Failed to retrieve sync proof."
  TRANSLATIONS["en,token_check"]="üîç Checking Telegram token and ChatID..."
  TRANSLATIONS["en,token_valid"]="‚úÖ Telegram token is valid"
  TRANSLATIONS["en,token_invalid"]="‚ùå Invalid Telegram token"
  TRANSLATIONS["en,chatid_valid"]="‚úÖ ChatID is valid and bot has access"
  TRANSLATIONS["en,chatid_invalid"]="‚ùå Invalid ChatID or bot has no access"
  TRANSLATIONS["en,agent_created"]="‚úÖ Agent successfully created and configured!"

  # Russian translations
  TRANSLATIONS["ru,welcome"]="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥—ã Aztec"
  TRANSLATIONS["ru,title"]="========= –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ========="
  TRANSLATIONS["ru,option1"]="1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫"
  TRANSLATIONS["ru,option2"]="2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cron-–∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
  TRANSLATIONS["ru,option3"]="3. –£–¥–∞–ª–∏—Ç—å cron-–∞–≥–µ–Ω—Ç –∏ —Ñ–∞–π–ª—ã"
  TRANSLATIONS["ru,option4"]="4. –ù–∞–π—Ç–∏ –∞–¥—Ä–µ—Å rollupAddress –≤ –ª–æ–≥–∞—Ö"
  TRANSLATIONS["ru,option5"]="5. –ù–∞–π—Ç–∏ PeerID –≤ –ª–æ–≥–∞—Ö"
  TRANSLATIONS["ru,option6"]="6. –ù–∞–π—Ç–∏ governanceProposerPayload –≤ –ª–æ–≥–∞—Ö"
  TRANSLATIONS["ru,option7"]="7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Proven L2 –±–ª–æ–∫ –∏ Sync Proof"
  TRANSLATIONS["ru,option8"]="8. –ò–∑–º–µ–Ω–∏—Ç—å RPC URL"
  TRANSLATIONS["ru,option0"]="0. –í—ã—Ö–æ–¥"
  TRANSLATIONS["ru,rpc_change_prompt"]="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π RPC URL:"
  TRANSLATIONS["ru,rpc_change_success"]="‚úÖ RPC URL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
  TRANSLATIONS["ru,choose_option"]="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
  TRANSLATIONS["ru,checking_deps"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
  TRANSLATIONS["ru,missing_tools"]="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:"
  TRANSLATIONS["ru,install_prompt"]="–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö —Å–µ–π—á–∞—Å? (Y/n):"
  TRANSLATIONS["ru,missing_required"]="‚ö†Ô∏è –ë–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ."
  TRANSLATIONS["ru,rpc_prompt"]="–í–≤–µ–¥–∏—Ç–µ RPC URL:"
  TRANSLATIONS["ru,env_created"]="‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env —Å RPC URL"
  TRANSLATIONS["ru,env_exists"]="‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª —Å RPC URL:"
  TRANSLATIONS["ru,search_container"]="üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∏–º–µ–Ω–µ–º 'aztec'..."
  TRANSLATIONS["ru,container_not_found"]="‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º 'aztec' –Ω–µ –Ω–∞–π–¥–µ–Ω."
  TRANSLATIONS["ru,container_found"]="‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:"
  TRANSLATIONS["ru,get_block"]="üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞..."
  TRANSLATIONS["ru,block_error"]="‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RPC –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç."
  TRANSLATIONS["ru,current_block"]="üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞:"
  TRANSLATIONS["ru,node_ok"]="‚úÖ –ù–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫"
  TRANSLATIONS["ru,node_behind"]="‚ö†Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–¥–∞ –æ—Ç—Å—Ç–∞—ë—Ç."
  TRANSLATIONS["ru,search_rollup"]="üîç –ü–æ–∏—Å–∫ rollupAddress –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'aztec'..."
  TRANSLATIONS["ru,rollup_found"]="‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π rollupAddress:"
  TRANSLATIONS["ru,rollup_not_found"]="‚ùå –ê–¥—Ä–µ—Å rollupAddress –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–µ."
  TRANSLATIONS["ru,search_peer"]="üîç –ü–æ–∏—Å–∫ PeerID –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'aztec'..."
  TRANSLATIONS["ru,peers_found"]="–ù–∞–π–¥–µ–Ω–Ω—ã–µ PeerID:"
  TRANSLATIONS["ru,peer_not_found"]="‚ùå –í –ª–æ–≥–∞—Ö PeerID –Ω–µ –Ω–∞–π–¥–µ–Ω."
  TRANSLATIONS["ru,search_gov"]="üîç –ü–æ–∏—Å–∫ governanceProposerPayload –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'aztec'..."
  TRANSLATIONS["ru,gov_found"]="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è governanceProposerPayload:"
  TRANSLATIONS["ru,gov_not_found"]="‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ governanceProposerPayload –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
  TRANSLATIONS["ru,gov_changed"]="üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ governanceProposerPayload!"
  TRANSLATIONS["ru,gov_was"]="‚ö†Ô∏è –ë—ã–ª–æ:"
  TRANSLATIONS["ru,gov_now"]="–°—Ç–∞–ª–æ:"
  TRANSLATIONS["ru,gov_no_changes"]="‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
  TRANSLATIONS["ru,token_prompt"]="–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token:"
  TRANSLATIONS["ru,chatid_prompt"]="–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID:"
  TRANSLATIONS["ru,agent_added"]="‚úÖ –ê–≥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ cron –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É."
  TRANSLATIONS["ru,agent_exists"]="‚ÑπÔ∏è –ê–≥–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ cron."
  TRANSLATIONS["ru,removing_agent"]="üóë –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏ cron-–∑–∞–¥–∞—á–∏..."
  TRANSLATIONS["ru,agent_removed"]="‚úÖ –ê–≥–µ–Ω—Ç –∏ cron-–∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω—ã."
  TRANSLATIONS["ru,goodbye"]="üëã –í—ã—Ö–æ–¥."
  TRANSLATIONS["ru,invalid_choice"]="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
  TRANSLATIONS["ru,searching"]="–ü–æ–∏—Å–∫..."
  TRANSLATIONS["ru,get_proven_block"]="üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ proven L2 –±–ª–æ–∫–∞..."
  TRANSLATIONS["ru,proven_block_found"]="‚úÖ –ù–æ–º–µ—Ä Proven L2 –±–ª–æ–∫–∞:"
  TRANSLATIONS["ru,proven_block_error"]="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä proven L2 –±–ª–æ–∫–∞."
  TRANSLATIONS["ru,get_sync_proof"]="üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Sync Proof..."
  TRANSLATIONS["ru,sync_proof_found"]="‚úÖ Sync Proof:"
  TRANSLATIONS["ru,sync_proof_error"]="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sync proof."
  TRANSLATIONS["ru,token_check"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Ç–æ–∫–µ–Ω–∞ –∏ ChatID..."
  TRANSLATIONS["ru,token_valid"]="‚úÖ Telegram —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
  TRANSLATIONS["ru,token_invalid"]="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram —Ç–æ–∫–µ–Ω"
  TRANSLATIONS["ru,chatid_valid"]="‚úÖ ChatID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø"
  TRANSLATIONS["ru,chatid_invalid"]="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ChatID –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
  TRANSLATIONS["ru,agent_created"]="‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
}

# === Configuration ===
CONTRACT_ADDRESS="0xee6d4e937f0493fb461f28a75cf591f1dba8704e"
FUNCTION_SIG="getPendingBlockNumber()"

REQUIRED_TOOLS=("cast" "curl" "crontab" "grep" "sed" "jq")
AGENT_SCRIPT_PATH="$HOME/aztec-monitor-agent"
LOG_FILE="$AGENT_SCRIPT_PATH/agent.log"

# === Dependency check ===
check_dependencies() {
  missing=()
  echo -e "\n${BLUE}$(t "checking_deps")${NC}\n"

  for tool in "${REQUIRED_TOOLS[@]}"; do
    if ! command -v "$tool" &>/dev/null; then
      echo -e "${RED}‚ùå $tool $(t "not_installed")${NC}"
      missing+=("$tool")
    else
      echo -e "${GREEN}‚úÖ $tool $(t "installed")${NC}"
    fi
  done

  if [ ${#missing[@]} -gt 0 ]; then
    echo -e "\n${YELLOW}$(t "missing_tools") ${missing[*]}${NC}"
    read -p "$(t "install_prompt") " confirm
    confirm=${confirm:-Y}

    if [[ "$confirm" =~ ^[Yy]$ ]]; then
      for tool in "${missing[@]}"; do
        case "$tool" in
          cast)
            echo -e "\n${CYAN}$(t "installing_foundry")${NC}"
            curl -L https://foundry.paradigm.xyz | bash

            if ! grep -q 'foundry/bin'  ~/.bash_profile; then
              echo 'export PATH="$PATH:$HOME/.foundry/bin"' >> ~/.bash_profile
            fi

            export PATH="$PATH:$HOME/.foundry/bin"
            foundryup
            ;;

          curl)
            echo -e "\n${CYAN}$(t "installing_curl")${NC}"
            sudo apt-get install -y curl || brew install curl
            ;;

          crontab)
            echo -e "\n${CYAN}$(t "installing_cron")${NC}"
            sudo apt-get install -y cron || brew install cronie
            ;;

          grep|sed)
            echo -e "\n${CYAN}$(t "installing_utils")${NC}"
            sudo apt-get install -y grep sed || brew install grep gnu-sed
            ;;

          jq)
            echo -e "\n${CYAN}$(t "installing_jq")${NC}"
            sudo apt-get install -y jq || brew install jq
            ;;
        esac
      done
    else
      echo -e "\n${RED}$(t "missing_required")${NC}"
      exit 1
    fi
  fi

  # Request RPC URL from user and create .env file
  if [ ! -f .env-aztec-agent ]; then
    echo -e "\n${BLUE}$(t "rpc_prompt")${NC}"
    read -p "> " RPC_URL
    echo "RPC_URL=$RPC_URL" > .env-aztec-agent
    echo -e "\n${GREEN}$(t "env_created")${NC}"
  else
    source .env-aztec-agent
    echo -e "\n${GREEN}$(t "env_exists") $RPC_URL${NC}"
  fi
}

# === Spinner function ===
spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\'

  while kill -0 "$pid" 2>/dev/null; do
    for i in $(seq 0 3); do
      printf "\r${CYAN}$(t "searching") %c${NC}" "${spinstr:i:1}"
      sleep $delay
    done
  done

  printf "\r                 \r"
}

# === Check container logs ===
check_aztec_container_logs() {
  source .env-aztec-agent

  echo -e "\n${BLUE}$(t "search_container")${NC}"
  container_id=$(docker ps --filter "name=aztec" --format "{{.ID}}" | head -n 1)

  if [ -z "$container_id" ]; then
    echo -e "\n${RED}$(t "container_not_found")${NC}"
    return
  fi

  echo -e "\n${GREEN}$(t "container_found") $container_id${NC}"

  echo -e "\n${BLUE}$(t "get_block")${NC}"
  block_hex=$(cast call "$CONTRACT_ADDRESS" "$FUNCTION_SIG" --rpc-url "$RPC_URL" 2>/dev/null)

  if [ -z "$block_hex" ]; then
    echo -e "\n${RED}$(t "block_error")${NC}"
    return
  fi

  block_number=$((block_hex))
  echo -e "\n${GREEN}$(t "current_block") $block_number${NC}"

  logs=$(docker logs --tail 500 "$container_id")

  if echo "$logs" | grep -q "$block_number"; then
    echo -e "\n${GREEN}$(t "node_ok")${NC}"
  else
    echo -e "\n${YELLOW}$(t "node_behind")${NC}"
  fi
}

# === Find rollupAddress in logs ===
find_rollup_address() {
  echo -e "\n${BLUE}$(t "search_rollup")${NC}"

  container_id=$(docker ps --filter "name=aztec" --format "{{.ID}}" | head -n 1)

  if [ -z "$container_id" ]; then
    echo -e "\n${RED}$(t "container_not_found")${NC}"
    return
  fi

  tmp_log=$(mktemp)
  docker logs "$container_id" > "$tmp_log" 2>/dev/null &

  spinner $!

  # Get last occurrence of rollupAddress
  rollup_address=$(grep -oP '"rollupAddress"\s*:\s*"\K0x[a-fA-F0-9]{40}' "$tmp_log" | tail -n 1)

  rm "$tmp_log"

  if [ -n "$rollup_address" ]; then
    echo -e "\n${GREEN}$(t "rollup_found") $rollup_address${NC}"
  else
    echo -e "\n${RED}$(t "rollup_not_found")${NC}"
  fi
}

# === Find PeerID in logs ===
find_peer_id() {
  echo -e "\n${BLUE}$(t "search_peer")${NC}"

  container_id=$(docker ps --filter "name=aztec" --format "{{.ID}}" | head -n 1)

  if [ -z "$container_id" ]; then
    echo -e "\n${RED}$(t "container_not_found")${NC}"
    return
  fi

  tmp_log=$(mktemp)
  docker logs "$container_id" > "$tmp_log" 2>/dev/null &

  spinner $!

  echo -e "\n${CYAN}$(t "peers_found")${NC}"
  # Show unique PeerIDs matching 16Uiu2... format
  grep -oP '"peerId"\s*:\s*"\K16U[^\"]+' "$tmp_log" | sort | uniq || echo -e "${RED}$(t "peer_not_found")${NC}"

  rm "$tmp_log"
}

# === Find governanceProposerPayload ===
find_governance_proposer_payload() {
  echo -e "\n${BLUE}$(t "search_gov")${NC}"

  container_id=$(docker ps --filter "name=aztec" --format "{{.ID}}" | tail -n 1)

  if [ -z "$container_id" ]; then
    echo -e "\n${RED}$(t "container_not_found")${NC}"
    return
  fi

  tmp_log=$(mktemp)
  docker logs "$container_id" > "$tmp_log" 2>/dev/null &

  spinner $!

  echo -e "\n${CYAN}$(t "gov_found")${NC}"

  # Extract all occurrences, remove consecutive duplicates but keep order
  mapfile -t payloads < <(grep -oE '"governanceProposerPayload":"0x[a-fA-F0-9]{40}"' "$tmp_log" | \
    sed -E 's/.*"governanceProposerPayload":"(0x[a-fA-F0-9]{40})"/\1/' | awk 'a != $0 {print; a = $0}')

  if [ "${#payloads[@]}" -eq 0 ]; then
    echo -e "\n${RED}$(t "gov_not_found")${NC}"
    rm "$tmp_log"
    return
  fi

  for p in "${payloads[@]}"; do
    echo "‚Ä¢ $p"
  done

  if [ "${#payloads[@]}" -gt 1 ]; then
    echo -e "\n${RED}$(t "gov_changed")${NC}"
    for ((i = 1; i < ${#payloads[@]}; i++)); do
      echo -e "${YELLOW}$(t "gov_was") ${payloads[i-1]} ‚Üí $(t "gov_now") ${payloads[i]}${NC}"
    done
  else
    echo -e "\n${GREEN}$(t "gov_no_changes")${NC}"
  fi

  rm "$tmp_log"
}

# === Create agent and cron task ===
create_cron_agent() {
  source .env-aztec-agent

  # Function to validate Telegram bot token
  validate_telegram_token() {
    local token=$1
    if [[ ! "$token" =~ ^[0-9]+:[a-zA-Z0-9_-]+$ ]]; then
      return 1
    fi
    # Test token by making API call
    local response=$(curl -s "https://api.telegram.org/bot${token}/getMe")
    if [[ "$response" == *"ok\":true"* ]]; then
      return 0
    else
      return 1
    fi
  }

  # Function to validate Telegram chat ID (updated version)
  validate_telegram_chat() {
    local token=$1
    local chat_id=$2
    # Test chat ID by trying to send a test message
    local response=$(curl -s -X POST "https://api.telegram.org/bot${token}/sendMessage" \
      -d chat_id="${chat_id}" \
      -d text="‚úÖ ChatID successfully linked to Aztec Agent" \
      -d parse_mode="Markdown")

    if [[ "$response" == *"ok\":true"* ]]; then
      return 0
    else
      return 1
    fi
  }

  # Get and validate Telegram bot token
  while true; do
    echo -e "\n${BLUE}$(t "token_prompt")${NC}"
    read -p "> " TELEGRAM_BOT_TOKEN

    if validate_telegram_token "$TELEGRAM_BOT_TOKEN"; then
      break
    else
      echo -e "${RED}Invalid Telegram bot token. Please try again.${NC}"
      echo -e "${YELLOW}Token should be in format: 1234567890:ABCdefGHIJKlmNoPQRsTUVwxyZ${NC}"
    fi
  done

  # Get and validate Telegram chat ID
  while true; do
    echo -e "\n${BLUE}$(t "chatid_prompt")${NC}"
    read -p "> " TELEGRAM_CHAT_ID

    if [[ "$TELEGRAM_CHAT_ID" =~ ^-?[0-9]+$ ]]; then
      if validate_telegram_chat "$TELEGRAM_BOT_TOKEN" "$TELEGRAM_CHAT_ID"; then
        break
      else
        echo -e "${RED}Invalid Telegram chat ID or the bot doesn't have access to this chat. Please try again.${NC}"
      fi
    else
      echo -e "${RED}Chat ID must be a number (can start with - for group chats). Please try again.${NC}"
    fi
  done

  mkdir -p "$AGENT_SCRIPT_PATH"

cat > "$AGENT_SCRIPT_PATH/agent.sh" <<EOF
#!/bin/bash
export PATH="$PATH:/root/.foundry/bin"

source \$HOME/.env-aztec-agent
CONTRACT_ADDRESS="$CONTRACT_ADDRESS"
FUNCTION_SIG="$FUNCTION_SIG"
TELEGRAM_BOT_TOKEN="$TELEGRAM_BOT_TOKEN"
TELEGRAM_CHAT_ID="$TELEGRAM_CHAT_ID"
LOG_FILE="$LOG_FILE"

# Create log file if it doesn't exist
if [ ! -f "\$LOG_FILE" ]; then
  touch "\$LOG_FILE" 2>/dev/null || {
    echo "Error: Could not create log file \$LOG_FILE"
    exit 1
  }
fi

if [ ! -w "\$LOG_FILE" ]; then
  echo "Error: No write permission for \$LOG_FILE"
  exit 1
fi

# Check log file size and clean if exceeds 1MB
MAX_SIZE=1048576
current_size=\$(stat -c%s "\$LOG_FILE")

if [ "\$current_size" -gt "\$MAX_SIZE" ]; then

  temp_file=\$(mktemp)
  awk '/INITIALIZED/ {print; exit} {print}' "\$LOG_FILE" > "\$temp_file"
  mv "\$temp_file" "\$LOG_FILE"
  chmod 644 "\$LOG_FILE"

  {
    echo ""
    echo "‚úÖ Log file cleaned."
    echo "Cleanup completed: \$(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
  } >> "\$LOG_FILE"

  ip=\$(curl -s https://api.ipify.org || echo "unknown-ip")
  curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendMessage" \\
    -d chat_id="\$TELEGRAM_CHAT_ID" \\
    -d text="‚ö†Ô∏è *Log file cleaned due to size limit*%0Aüåê Server: \$ip%0AüóÉ File: \$LOG_FILE%0Aüìè Previous size: \$current_size bytes." \\
    -d parse_mode="Markdown" >/dev/null
else
  {
    echo "="
    echo "Log size check"
    echo "Current size: \$current_size bytes (within limit)."
    echo "Check timestamp: \$(date '+%Y-%m-%d %H:%M:%S')"
    echo "="
  } >> "\$LOG_FILE"
fi

log() {
  echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" >> "\$LOG_FILE"
}

send_telegram_message() {
  local message="\$1"
  curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendMessage" \\
    -d chat_id="\$TELEGRAM_CHAT_ID" \\
    -d text="\$message" \\
    -d parse_mode="Markdown" >/dev/null
}

get_ip_address() {
  curl -s https://api.ipify.org || echo "unknown-ip"
}

# New hex to decimal conversion function
hex_to_dec() {
  local hex=\$1
  # Remove 0x prefix if present
  hex=\${hex#0x}
  # Remove leading zeros
  hex=\$(echo \$hex | sed 's/^0*//')
  # If empty after removing zeros, return 0
  [ -z "\$hex" ] && echo 0 && return
  echo \$((16#\$hex))
}

# Check if container exists
container_id=\$(docker ps --filter "name=aztec" --format "{{.ID}}" | head -n 1)

if [ -z "\$container_id" ]; then
  log "Container 'aztec' not found."
  ip=\$(get_ip_address)
  send_telegram_message "‚ùå *Aztec Container Not Found*%0Aüåê Server: \$ip%0Aüïí \$(date '+%Y-%m-%d %H:%M:%S')"
  exit 0
fi

# Get current block from contract
block_hex=\$(cast call "\$CONTRACT_ADDRESS" "\$FUNCTION_SIG" --rpc-url "\$RPC_URL" 2>&1)
log "Raw cast call output: \$block_hex"

# Check if call was successful
if [[ "\$block_hex" == *"Error"* || -z "\$block_hex" ]]; then
  ip=\$(get_ip_address)
  error_msg="‚ùå *Block Fetch Error*%0Aüåê Server: \$ip%0Aüîó RPC: \$RPC_URL%0Aüí¨ Error: \$block_hex%0Aüïí \$(date '+%Y-%m-%d %H:%M:%S')"
  send_telegram_message "\$error_msg"
  log "\$error_msg"
  exit 0
fi

# Convert hex to decimal using new function
block_number=\$(hex_to_dec "\$block_hex")
log "Converted block number: \$block_number"

if [ -z "\$block_number" ]; then
  log "Error: Block number conversion failed"
  exit 0
fi

logs=\$(docker logs --tail 1000 "\$container_id" 2>&1)
ip=\$(get_ip_address)

# Try to find the latest L2 block in logs
log_block=\$(echo "\$logs" | grep -oP 'Downloaded L2 block \\K[0-9]+' | tail -n 1)

if [ -z "\$log_block" ]; then
  log_block="none found"
fi

# Log all information
log "Contract block: \$block_number"
log "Logs block: \$log_block"

# Prepare status message
if [ "\$log_block" == "none found" ]; then
  status="‚ùå No blocks found in logs"
elif [ "\$log_block" -eq "\$block_number" ]; then
  status="‚úÖ Node is synced (block \$block_number)"
else
  blocks_diff=\$((block_number - log_block))
  status="‚ö†Ô∏è Node is behind by \$blocks_diff blocks (logs: \$log_block, contract: \$block_number)"
fi

log "Status: \$status"

# Check if we need to send notifications
if [ "\$log_block" == "none found" ]; then
  message="‚ùå *No blocks processed*%0Aüåê Server: \$ip%0Aüì¶ Contract block: \$block_number%0Aüïí \$(date '+%Y-%m-%d %H:%M:%S')"
  send_telegram_message "\$message"
elif [ "\$log_block" -ne "\$block_number" ]; then
  blocks_diff=\$((block_number - log_block))
  # Send notification only if difference is more than 3 blocks
  if [ \$blocks_diff -gt 3 ]; then
    message="‚ö†Ô∏è *Node is behind by \$blocks_diff blocks*%0Aüåê Server: \$ip%0Aüì¶ Contract block: \$block_number%0Aüìù Logs block: \$log_block%0Aüïí \$(date '+%Y-%m-%d %H:%M:%S')"
    send_telegram_message "\$message"
  else
    log "Block difference (\$blocks_diff) is within acceptable range, no notification sent"
  fi
fi

# Send welcome message on first run
if ! grep -q "INITIALIZED" "\$LOG_FILE"; then
  welcome_msg="ü§ñ *Aztec Monitoring Agent Started*%0Aüåê Server: \$ip%0A\$status%0A‚ÑπÔ∏è Notifications will be sent for issues%0Aüïí \$(date '+%Y-%m-%d %H:%M:%S')"
  send_telegram_message "\$welcome_msg"
  echo "INITIALIZED" >> "\$LOG_FILE"
fi
EOF

  chmod +x "$AGENT_SCRIPT_PATH/agent.sh"

  if ! crontab -l | grep -q "$AGENT_SCRIPT_PATH/agent.sh"; then
    (crontab -l 2>/dev/null; echo "* * * * * $AGENT_SCRIPT_PATH/agent.sh") | crontab -
    echo -e "\n${GREEN}$(t "agent_added")${NC}"
  else
    echo -e "\n${YELLOW}$(t "agent_exists")${NC}"
  fi
}

# === Remove cron task and agent ===
remove_cron_agent() {
  echo -e "\n${BLUE}$(t "removing_agent")${NC}"
  crontab -l 2>/dev/null | grep -v "$AGENT_SCRIPT_PATH/agent.sh" | crontab -
  rm -rf "$AGENT_SCRIPT_PATH"
  echo -e "\n${GREEN}$(t "agent_removed")${NC}"
}

# === Check Proven L2 Block and Sync Proof ===
check_proven_block() {
  echo -e "\n${BLUE}$(t "get_proven_block")${NC}"

  PROVEN_BLOCK=$(curl -s -X POST -H 'Content-Type: application/json' \
    -d '{"jsonrpc":"2.0","method":"node_getL2Tips","params":[],"id":67}' \
    http://localhost:8080 | jq -r ".result.proven.number")

  if [[ -z "$PROVEN_BLOCK" || "$PROVEN_BLOCK" == "null" ]]; then
    echo -e "\n${RED}$(t "proven_block_error")${NC}"
    return
  fi

  echo -e "\n${GREEN}$(t "proven_block_found") $PROVEN_BLOCK${NC}"

  echo -e "\n${BLUE}$(t "get_sync_proof")${NC}"
  SYNC_PROOF=$(curl -s -X POST -H 'Content-Type: application/json' \
    -d "{\"jsonrpc\":\"2.0\",\"method\":\"node_getArchiveSiblingPath\",\"params\":[\"$PROVEN_BLOCK\",\"$PROVEN_BLOCK\"],\"id\":68}" \
    http://localhost:8080 | jq -r ".result")

  if [[ -z "$SYNC_PROOF" || "$SYNC_PROOF" == "null" ]]; then
    echo -e "\n${RED}$(t "sync_proof_error")${NC}"
    return
  fi

  echo -e "\n${GREEN}$(t "sync_proof_found")${NC}"
  echo "$SYNC_PROOF"
}

# === Change RPC URL ===
change_rpc_url() {
  echo -e "\n${BLUE}$(t "rpc_change_prompt")${NC}"
  read -p "> " NEW_RPC_URL

  if [ -z "$NEW_RPC_URL" ]; then
    echo -e "${RED}Error: RPC URL cannot be empty${NC}"
    return 1
  fi

  # Test the new RPC URL
  echo -e "\n${BLUE}Testing new RPC URL...${NC}"
  response=$(curl -s -X POST -H "Content-Type: application/json" \
    --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
    "$NEW_RPC_URL" 2>/dev/null)

  if [[ -z "$response" || "$response" == *"error"* ]]; then
    echo -e "${RED}Error: Failed to connect to the RPC endpoint. Please check the URL and try again.${NC}"
    return 1
  fi

  # Update the .env file
  echo "RPC_URL=$NEW_RPC_URL" > .env-aztec-agent
  echo -e "\n${GREEN}$(t "rpc_change_success")${NC}"
  echo -e "${YELLOW}New RPC URL: $NEW_RPC_URL${NC}"

  # Reload the environment
  source .env-aztec-agent
}

# === Main menu ===
main_menu() {
  show_logo
  while true; do
    echo -e "\n${BLUE}$(t "title")${NC}"
    echo -e "${CYAN}$(t "option1")${NC}"
    echo -e "${CYAN}$(t "option2")${NC}"
    echo -e "${CYAN}$(t "option3")${NC}"
    echo -e "${CYAN}$(t "option4")${NC}"
    echo -e "${CYAN}$(t "option5")${NC}"
    echo -e "${CYAN}$(t "option6")${NC}"
    echo -e "${CYAN}$(t "option7")${NC}"
    echo -e "${CYAN}$(t "option8")${NC}"
    echo -e "${RED}$(t "option0")${NC}"
    echo -e "${BLUE}================================${NC}"

    read -p "$(t "choose_option") " choice

    case "$choice" in
      1) check_aztec_container_logs ;;
      2) create_cron_agent ;;
      3) remove_cron_agent ;;
      4) find_rollup_address ;;
      5) find_peer_id ;;
      6) find_governance_proposer_payload ;;
      7) check_proven_block ;;
      8) change_rpc_url ;;
      0) echo -e "\n${GREEN}$(t "goodbye")${NC}"; exit 0 ;;
      *) echo -e "\n${RED}$(t "invalid_choice")${NC}" ;;
    esac
  done
}

# === Script launch ===
init_languages
check_dependencies
main_menu